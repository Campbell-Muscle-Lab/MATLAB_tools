function subplots = layout_subplots(options);
% Function creates a reproducible panel layout

    arguments
        options.figure_handle (1,1) double = NaN
        options.panels_wide (1,1) double = 2
        options.panels_high (1,1) double = 2
        options.page_height (1,1) double = 11
        options.page_width (1,1) double = 8.5
        options.figure_width (1,1) double = 3.5
        options.top_margin (1,1) double = 0.0
        options.bottom_margin (1,1) double = 0.5
        options.left_margin (1,1) double = 0.5
        options.padding_top (1,:) double = 0.2
        options.padding_bottom (1,:) double = 0.5
        options.padding_left (1,:) double = 0.75
        options.padding_right (1,:) double = 0.25
        options.right_margin (1,1) double = NaN
        options.x_to_y_ratio (1,1) double = 1
        options.padding_left_adjustments (1,:) = 0
        options.padding_right_adjustments (1,:) = 0
        options.padding_top_adjustments (1,:) = 0
        options.padding_bottom_adjustments (1,:) = 0
        options.omit_subplots = NaN
        options.panel_label_font_size (1,1) double = 12
        options.panel_label_font_name (1,1) string = "Helvetica"
        options.panel_label_font_weight (1,1) string = "Bold"
        options.panel_labels (1,:) string = ""
    end

    % Set some defaults
    if (isnan(options.figure_handle))
        options.figure_handle = gcf;
    end

    % Work out some basics
    no_of_panels = options.panels_wide * options.panels_high;

    % If there is more than one panel, we should prepare to add
    % panel labels
    if (no_of_panels > 1)
        if (all(options.panel_labels == ""))
            for i = 1 : no_of_panels
                options.panel_labels(i) = string(sprintf('%s', i+64))
            end
        end
    end

    % Goal is to come up with arrays that are no_of_panels long for
    %   options.padding_top
    %   options.padding_top_adjustments
    %   options.padding_bottom
    %   options.padding_bottom_adjustments
    %   options.padding_left
    %   options.padding_left_adjustments
    %   options.padding_right
    %   options.padding_right_adjustments
    % If there is a single value, repeat it out for no_of_panels
    % For top and bottom adjustments, an input array implies values for
    % each row, expand out to handle columns
    % For left and right adjustments, an input array implies values for
    % each column, expand out to handle rows

    options.padding_top = expand_out_axes_properties( ...
        options.padding_top, options.panels_wide, options.panels_high, "col");
    options.padding_top_adjustments = expand_out_axes_properties( ...
        options.padding_top_adjustments, options.panels_wide, options.panels_high, "col");
    options.padding_bottom = expand_out_axes_properties( ...
        options.padding_bottom, options.panels_wide, options.panels_high, "col");
    options.padding_bottom_adjustments = expand_out_axes_properties( ...
        options.padding_bottom_adjustments, options.panels_wide, options.panels_high, "col");
    options.padding_left = expand_out_axes_properties( ...
        options.padding_left, options.panels_wide, options.panels_high, "row");
    options.padding_left_adjustments = expand_out_axes_properties( ...
        options.padding_left_adjustments, options.panels_wide, options.panels_high, "row");
    options.padding_right = expand_out_axes_properties( ...
        options.padding_right, options.panels_wide, options.panels_high, "row");
    options.padding_right_adjustments = expand_out_axes_properties( ...
        options.padding_right_adjustments, options.panels_wide, options.panels_high, "row");

    % Set a subplot counter
    subplot_counter = 1;

    % Loop through the rows
    for row = 1 : options.panels_high

        row_indices = ((row - 1) * options.panels_wide) + ...
                            (1 : options.panels_wide);

        % Set the axis width
        if (row == 1)
            axis_width = (options.figure_width - ...
                            sum(options.padding_left(row_indices)) - ...
                            sum(options.padding_left_adjustments(row_indices)) - ...
                            sum(options.padding_right(row_indices)) + ...
                            sum(options.padding_right_adjustments(row_indices))) / ...
                        options.panels_wide;

            axis_height = axis_width / options.x_to_y_ratio;

            % Calculate the figure_height off the first col
            first_col_indices = 1:options.panels_wide:no_of_panels;
            
            options.figure_height = (options.panels_high * axis_height) + ...
                sum(options.padding_top(first_col_indices)) + ...
                sum(options.padding_top_adjustments(first_col_indices)) + ...
                sum(options.padding_bottom(first_col_indices)) - ...
                sum(options.padding_bottom_adjustments(first_col_indices));

            % Now we know the dimensions, we can make the figure
            options.figure_handle = figure(options.figure_handle);
            clf;
            set(options.figure_handle, 'Units', 'inches', 'PaperType', 'usletter');
            set(options.figure_handle, 'Position', ...
                [options.left_margin ...
                    options.page_height-options.bottom_margin - options.figure_height ...
                    options.figure_width ...
                    options.figure_height]);
        end

        % And the columns
        for col = 1 : options.panels_wide
            
            % Check for omit panel
            if (any(options.omit_subplots == subplot_counter))
                continue;
            end

            lhs(subplot_counter) = ((col-1)*(axis_width)) + ...
                sum(options.padding_left(row_indices(1 : col))) + ...
                sum(options.padding_right(row_indices(1 : (col-1)))) + ...
                options.padding_left_adjustments(row_indices(col));

            rhs(subplot_counter) = lhs(subplot_counter) + axis_width + ...
                options.padding_right_adjustments(row_indices(col));

            top(subplot_counter) = options.figure_height - ...
                sum(options.padding_top(first_col_indices(1:row))) - ...
                sum(options.padding_bottom(first_col_indices(1:(row-1)))) - ...
                ((row-1) * axis_height);

            bottom(subplot_counter) = top(subplot_counter) - ...
                axis_height;

            l = lhs(subplot_counter) / options.figure_width;
            b = bottom(subplot_counter) / options.figure_height;
            w = (rhs(subplot_counter) - lhs(subplot_counter)) / options.figure_width;
            h = (top(subplot_counter) - bottom(subplot_counter)) / options.figure_height;

            subplots(subplot_counter) = subplot('Position', [l b w h]);
            hold on;

            % Add the label if required
            if (options.panel_labels(subplot_counter) ~= "")

                h = subplots(subplot_counter);
                h.Units = 'inches';
                pos = h.Position
                x_label = pos(1) - 0*options.padding_left(subplot_counter)
                y_label = pos(2)
                % 
                % l_label = -options.padding_left(subplot_counter) / ...
                %         (rhs(subplot_counter) - lhs(subplot_counter));
                % t_label = (axis_height + options.padding_top(subplot_counter)) / ...
                %             axis_height;

                text(x_label, y_label, ...
                        options.panel_labels(subplot_counter), ...
                        Units = 'inches', ...
                        HorizontalAlignment = 'left', ...
                        VerticalAlignment = 'top', ...
                        FontName = options.panel_label_font_name, ...
                        FontSize = options.panel_label_font_size, ...
                        FontWeight = options.panel_label_font_weight);

                drawnow;

                return
            end

            drawnow;

            % Increment counter
            subplot_counter = subplot_counter + 1;

        end
    end

    % Restore defaults
    set(options.figure_handle,'PaperUnits','inches')

end

function z = expand_out_axes_properties(z, panels_wide, panels_high, mode)
% Fills out z so that its length is equal to the number of panels

    % Code
    no_of_panels = panels_wide * panels_high;

    if (mode == "row")
        switch numel(z)
            case 1
                z = repmat(z, [1 no_of_panels]);
            case (panels_wide)
                z = repmat(z, [1 panels_high]);
        end
    else
        switch numel(z)
            case 1
                z = repmat(z, [1 no_of_panels]);
            case (panels_wide)
                z = repmat(z, [1 panels_wide]);
        end
    end

end
